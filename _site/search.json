

[
  
  
    
    
      {
        "title": "URL Shortener - Firebase",
        "excerpt": "As the name states this is a url shortener built on Firebase, it uses Firebase Realtime Database, Firebase Cloud Functions + Express.js, and Firebase Hosting. At it’s core the project used these services to query and read from the database to see if any data exits. The services are exposed in two ways; http endpoints that automatically handle things and API endpoints that respond in JSON. Let’s walk through some scenarios using HTTP.\n\nPrerequisites\n\nBefore starting let’s talk about the project set up. The project is completely hosted on Firebase, this makes it easy to reroute URL requests through various ways. For this project we’ll be rerouting requests from baseURL/r/${UUID} to the function “reroute”. This will allow us to instantly process at the server level. As we will have an API we also need to set up an Express path, /v0/url/:urlId/. Lastly, we’ll set up two functions, shortenURL and redirect.\n\nGenerating Shortened URL\n\nNow that we have an idea of the set up let’s walk through the process of shortening a URL. A user goes to the project homepage where they can input the url. Once the user hits shorten we check the input to verify it is a valid url. If it is then we use the Firebase SDK to inoke our “onCall” function shortenURL. By using the Firebase SDK we don’t have to worry about the function’s url, preparing our request, and interpeting our response.\n\nNow in the shortenURL function we sanitize our input, we remove trailing slashes and http info. This helps us avoid duplicates and makes it slightly easier to query. With our sanitized input ready we query the database for any entry that has our input as their original url. If an entry is found then we send the information back. Otherwise we generate a UUID, use it as a key for a new database entry. Once the entry is created we send back this entry.\n\nNow in our client we receive a database entry, that was either new or existing, we then display this information to the user. And voila, we shortened a URL.\n\nUsing Shortened URL (HTTP)\n\nConsuming a shorted URL is even simpler than generating it because of Firebase. The format of a shorted URL is baseURL/r/${UUID}, as per our set up any call to /r/ will be sent to the redirect function. Inside this function we use the UUID to directly find the exact entry in the database for our shortened URL, no querying required! If it exits we retrieve the original URL and send back a response that redirects the user to the original URL. If no entry is found then we redirect to the project home page.\n\nClosing Thoughts\n\nThis write up isn’t meant to detail every step to recreate the project. It’s meant to give you an overview of the project. If you’re interested in learning more about feel free to visit the project repo and give it a try at the live link above. The project does use TypeScipt and some intermediate features of Firebase. So if you have any questions about it feel free to reach out.\n\nThanks for reading.\n\nLive Demo\nLink\n\nSource Code\nGitHub Repo\n",
        "content": "As the name states this is a url shortener built on Firebase, it uses Firebase Realtime Database, Firebase Cloud Functions + Express.js, and Firebase Hosting. At it’s core the project used these services to query and read from the database to see if any data exits. The services are exposed in two ways; http endpoints that automatically handle things and API endpoints that respond in JSON. Let’s walk through some scenarios using HTTP.\n\nPrerequisites\n\nBefore starting let’s talk about the project set up. The project is completely hosted on Firebase, this makes it easy to reroute URL requests through various ways. For this project we’ll be rerouting requests from baseURL/r/${UUID} to the function “reroute”. This will allow us to instantly process at the server level. As we will have an API we also need to set up an Express path, /v0/url/:urlId/. Lastly, we’ll set up two functions, shortenURL and redirect.\n\nGenerating Shortened URL\n\nNow that we have an idea of the set up let’s walk through the process of shortening a URL. A user goes to the project homepage where they can input the url. Once the user hits shorten we check the input to verify it is a valid url. If it is then we use the Firebase SDK to inoke our “onCall” function shortenURL. By using the Firebase SDK we don’t have to worry about the function’s url, preparing our request, and interpeting our response.\n\nNow in the shortenURL function we sanitize our input, we remove trailing slashes and http info. This helps us avoid duplicates and makes it slightly easier to query. With our sanitized input ready we query the database for any entry that has our input as their original url. If an entry is found then we send the information back. Otherwise we generate a UUID, use it as a key for a new database entry. Once the entry is created we send back this entry.\n\nNow in our client we receive a database entry, that was either new or existing, we then display this information to the user. And voila, we shortened a URL.\n\nUsing Shortened URL (HTTP)\n\nConsuming a shorted URL is even simpler than generating it because of Firebase. The format of a shorted URL is baseURL/r/${UUID}, as per our set up any call to /r/ will be sent to the redirect function. Inside this function we use the UUID to directly find the exact entry in the database for our shortened URL, no querying required! If it exits we retrieve the original URL and send back a response that redirects the user to the original URL. If no entry is found then we redirect to the project home page.\n\nClosing Thoughts\n\nThis write up isn’t meant to detail every step to recreate the project. It’s meant to give you an overview of the project. If you’re interested in learning more about feel free to visit the project repo and give it a try at the live link above. The project does use TypeScipt and some intermediate features of Firebase. So if you have any questions about it feel free to reach out.\n\nThanks for reading.\n\nLive Demo\nLink\n\nSource Code\nGitHub Repo\n",
        "url": "/portfolio/url_shortener/"
      },
    
  
    
    
      {
        "title": "2nd Gig",
        "excerpt": "You might be wondering why the site is called “2nd Gig”. Well, it’s simple, this is my second attempt at creating a personal site. My previous attempt was only a month ago, it was a sort of new year’s resolution. It was meant to get me to focus on improving my professional skills every day and collaborate with others. The site was a success, as it caused me to learn Jekyll.\n\nThe first version of this site was created using the Alembic Theme. Being honest I did not really like the theme too much, I appreciated it’s simplicity and features, such as search and category page, but wanted something that was more “me”. So I decided to look around and ended up finding a theme by Colorlib, Noah. I felt it was modern, there was just one major problem. It was an HTML theme and the site runs on Jekyll. I could have just done a regular HTML site… but I decided to challenge myself by porting it over to Jekyll. Now the site is about halfways ported over to Jekyll, some pages that I won’t use are untouched, but it’s enough to get going with my 2nd Gig. You can find the Jekyll version of the theme at its GitHub repo. Feel free to use it how you like, just remember to comply with its software license.\n\nIn the coming days, I’ll keep working on the Jekyll port of the theme, but I’ll begin to add to my portfolio. Blog posts will be scarce in the upcoming weeks but I do plan on making some posts that cover the basics of Java, JavaScript, Android, and more. Alongside that, I might post tutorials on some more Jekyll related topics as I keep running into issues that are only solved after reading long GitHub threads. So with that thanks for reading.\n",
        "content": "You might be wondering why the site is called “2nd Gig”. Well, it’s simple, this is my second attempt at creating a personal site. My previous attempt was only a month ago, it was a sort of new year’s resolution. It was meant to get me to focus on improving my professional skills every day and collaborate with others. The site was a success, as it caused me to learn Jekyll.\n\nThe first version of this site was created using the Alembic Theme. Being honest I did not really like the theme too much, I appreciated it’s simplicity and features, such as search and category page, but wanted something that was more “me”. So I decided to look around and ended up finding a theme by Colorlib, Noah. I felt it was modern, there was just one major problem. It was an HTML theme and the site runs on Jekyll. I could have just done a regular HTML site… but I decided to challenge myself by porting it over to Jekyll. Now the site is about halfways ported over to Jekyll, some pages that I won’t use are untouched, but it’s enough to get going with my 2nd Gig. You can find the Jekyll version of the theme at its GitHub repo. Feel free to use it how you like, just remember to comply with its software license.\n\nIn the coming days, I’ll keep working on the Jekyll port of the theme, but I’ll begin to add to my portfolio. Blog posts will be scarce in the upcoming weeks but I do plan on making some posts that cover the basics of Java, JavaScript, Android, and more. Alongside that, I might post tutorials on some more Jekyll related topics as I keep running into issues that are only solved after reading long GitHub threads. So with that thanks for reading.\n",
        "url": "/intro/2019/01/30/2nd-Gig/"
      },
    
  
  
  
  {
    "title": "About Me",
    "excerpt": "\n",
    "content": "\n",
    "url": "/about/"
  },
  
  {
    "title": "Home",
    "excerpt": "\n",
    "content": "\n",
    "url": "/"
  },
  
  {
    "title": "My page",
    "excerpt": "\n",
    "content": "\n",
    "url": "/test-post/"
  },
  
  {
    "title": "2nd Gig",
    "excerpt": "\n",
    "content": "\n",
    "url": "/portfolio/index.html"
  },
  
  {
    "title": "2nd Gig",
    "excerpt": "\n",
    "content": "\n",
    "url": "/blog/index.html"
  }
  
]

